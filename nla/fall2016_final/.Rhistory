source('~/math_examples/nla/hw1/nla_funcs.R')
M <-cublic_spline(x,y)
list(M,) <-cublic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
source('~/math_examples/nla/hw1/nla_funcs.R')
source('~/math_examples/nla/hw1/nla_funcs.R')
M <-cublic_spline(x,y)
M
source('~/math_examples/nla/hw1/nla_funcs.R')
coeffs <-cublic_spline(x,y)
a <- c(0*1:(4*n))
b <- c(0*1:(4*n))
c <- c(0*1:(4*n))
d <- c(0*1:(4*n))
for (i in 1:n) {
a[i] <- coeffs[4*i-3]
b[i] <- coeffs[4*i-2]
c[i] <- coeffs[4*i-1]
d[i] <- coeffs[4*i]
}
a
b
c
d
a <- c(0*1:(4*n))
b <- c(0*1:(4*n))
c <- c(0*1:(4*n))
d <- c(0*1:(4*n))
for (i in 1:n) {
a[i] <- coeffs[4*i-3]
b[i] <- coeffs[4*i-2]
c[i] <- coeffs[4*i-1]
d[i] <- coeffs[4*i]
}
coeffs
source('~/math_examples/nla/hw1/nla_funcs.R')
coeffs <-cublic_spline(x,y)
coeffs
y
source('~/math_examples/nla/hw1/nla_funcs.R')
coeffs <-cublic_spline(x,y)
coeffs
z
z(1/12)
z.splinefunc
plot(z)
spline(x,y,method="natural")
plot(spline(x,y,method="natural"))
plot(spline(x,y,method="natural",n=100))
plot(spline(x,y,method="natural",n=1))
plot(spline(x,y,method="natural",n=100))
slinecoef <- get("z",envir=environment(z))
slinecoef
x
y
f<- splinefunc(x,y,"natural")
f<- splinefun(x,y,"natural")
ls(envir = environment(f))
splinecoeff <- get("z",envir=environment(f))
splinecoeff
f<- splinefun(x,y,method="natural")
ls(envir = environment(f))
splinecoeff <- get("z",envir=environment(f))
splinecoeff
f(1/12)
g <- cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
g <- cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
g <- cubic_spline(x,y)
g
source('~/math_examples/nla/hw1/nla_funcs.R')
g <- cubic_spline(x,y)
g
x
y
source('~/math_examples/nla/hw1/nla_funcs.R')
cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
source('~/math_examples/nla/hw1/nla_funcs.R')
cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
source('~/math_examples/nla/hw1/nla_funcs.R')
cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
source('~/math_examples/nla/hw1/nla_funcs.R')
cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
cubic_spline(x,y)
source('~/math_examples/nla/hw1/nla_funcs.R')
source('~/math_examples/nla/hw1/nla_funcs.R')
cubic_spline(x,y)
for(i in 1:(n-1)) {
vec_val <- i+1
4*i-2
#  M_bar[4*i,4*i-2] <- 1; M_bar[4*i,4*i-1] <- 2*x[vec_val]
#  M_bar[4*i,4*i] <- 3*(x[vec_val])^2; M_bar[4*i,4*i+2] <- -1
#  M_bar[4*i,4*i+3] <- -2*x[vec_val]; M_bar[4*i,4*i+4] <- -3*(x[vec_val])^2
#  M_bar[4*i+1,4*i-1] <- 2; M_bar[4*i +1,4*i] <- 6*x[vec_val]
#  M_bar[4*i+1,4*i+3] <- -2; M_bar[4*i+1,4*i+4] <- -6*x[vec_val]
}
for(i in 1:(n-1)) {
vec_val <- i+1
print(4*i-2)
#  M_bar[4*i,4*i-2] <- 1; M_bar[4*i,4*i-1] <- 2*x[vec_val]
#  M_bar[4*i,4*i] <- 3*(x[vec_val])^2; M_bar[4*i,4*i+2] <- -1
#  M_bar[4*i,4*i+3] <- -2*x[vec_val]; M_bar[4*i,4*i+4] <- -3*(x[vec_val])^2
#  M_bar[4*i+1,4*i-1] <- 2; M_bar[4*i +1,4*i] <- 6*x[vec_val]
#
for(i in 1:(n-1)) {
vec_val <- i+1
print(4*i-2)
#  M_bar[4*i,4*i-2] <- 1; M_bar[4*i,4*i-1] <- 2*x[vec_val]
#  M_bar[4*i,4*i] <- 3*(x[vec_val])^2; M_bar[4*i,4*i+2] <- -1
#  M_bar[4*i,4*i+3] <- -2*x[vec_val]; M_bar[4*i,4*i+4] <- -3*(x[vec_val])^2
#  M_bar[4*i+1,4*i-1] <- 2; M_bar[4*i +1,4*i] <- 6*x[vec_val]
#  M_bar[4*i+1,4*i+3] <- -2; M_bar[4*i+1,4*i+4] <- -6*x[vec_val]
}
)
for(i in 1:(n-1)) {
vec_val <- i+1
print(4*i-2)
#  M_bar[4*i,4*i-2] <- 1; M_bar[4*i,4*i-1] <- 2*x[vec_val]
#  M_bar[4*i,4*i] <- 3*(x[vec_val])^2; M_bar[4*i,4*i+2] <- -1
#  M_bar[4*i,4*i+3] <- -2*x[vec_val]; M_bar[4*i,4*i+4] <- -3*(x[vec_val])^2
#  M_bar[4*i+1,4*i-1] <- 2; M_bar[4*i +1,4*i] <- 6*x[vec_val]
#  M_bar[4*i+1,4*i+3] <- -2; M_bar[4*i+1,4*i+4] <- -6*x[vec_val]
}
print(4*i-2)
source("../hw1/nla_funcs.R")
for(i in 1:(n-1)) {
vec_val <- i+1
print(4*i-2)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
vec_val <- i+1
print(4*i-2)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
vec_val <- i+1
print(4*i-3)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
print(4*i-2)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
print(4*i-1)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
print(4*i-3)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
print(4*i-1)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
print(4*i-1)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
print(4*i-1)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
print(4*i-2)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
print(4*i-1)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n)) {
print(4*i-1)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n-1)) {
print(4*i-2)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n-1)) {
print(4*i-1)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n-1)) {
print(4*i+2)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n-1)) {
print(4*i+3)
}
source("../hw1/nla_funcs.R")
for(i in 1:(n-1)) {
print(4*i+4)
}
log(e)
log(exp)
exp
exp(1)
log(exp(1))
-log(.9980)/(2/12)
x <- c(0.001,-log(.9980)/(2/12), -log(.9935)/(5/12), -log(.9820)/(11/12), -log(.9775)/(15/12))
x
x <- c(0, 2/12,5/12,11/12,15/12)
y <- c(0.001,-log(.9980)/(2/12), -log(.9935)/(5/12), -log(.9820)/(11/12), -log(.9775)/(15/12))
x
c
y
xx
y
x
source('~/math_examples/nla/hw1/nla_funcs.R')
source('~/math_examples/nla/hw1/nla_funcs.R')
M<- cubic_spline(x,y)
M
print(M,6)
source('~/math_examples/nla/hw1/nla_funcs.R')
coeffs <- cubic_spline(x,y)
coeffs
n<-4
a <- c(0*1:(4*n))
b <- c(0*1:(4*n))
c <- c(0*1:(4*n))
d <- c(0*1:(4*n))
for (i in 1:n) {
a[i] <- coeffs[4*i-3]
b[i] <- coeffs[4*i-2]
c[i] <- coeffs[4*i-1]
d[i] <- coeffs[4*i]
}
a
b
c
d
n<-4
a <- c(0*1:n
b <- c(0*1:n)
c <- c(0*1:n)
d <- c(0*1:4*n)
for (i in 1:n) {
a[i] <- coeffs[4*i-3]
b[i] <- coeffs[4*i-2]
c[i] <- coeffs[4*i-1]
d[i] <- coeffs[4*i]
}
n<-4
a <- c(0*1:n)
b <- c(0*1:n)
c <- c(0*1:n)
d <- c(0*1:4*n)
for (i in 1:n) {
a[i] <- coeffs[4*i-3]
b[i] <- coeffs[4*i-2]
c[i] <- coeffs[4*i-1]
d[i] <- coeffs[4*i]
}
a
b
c
d
source("../hw1/nla_funcs.R")
#x <- c(0, 2/12,5/12,11/12,15/12)
#y <- c(0.001,-log(.9980)/(2/12), -log(.9935)/(5/12), -log(.9820)/(11/12), -log(.9775)/(15/12))
#Demo problem from book
x <- c(0,2/12,6/12,1,20/12)
y <- c(0.0050,0.0065,0.0085,0.0105,0.0120)
coeffs<- cubic_spline(x,y)
n<-4
a <- c(0*1:n)
b <- c(0*1:n)
c <- c(0*1:n)
d <- c(0*1:4*n)
for (i in 1:n) {
a[i] <- coeffs[4*i-3]
b[i] <- coeffs[4*i-2]
c[i] <- coeffs[4*i-1]
d[i] <- coeffs[4*i]
}
a
b
c
d
source("../hw1/nla_funcs.R")
x <- c(0, 2/12,5/12,11/12,15/12)
y <- c(0.001,-log(.9980)/(2/12), -log(.9935)/(5/12), -log(.9820)/(11/12), -log(.9775)/(15/12))
#Demo problem from book
#x <- c(0,2/12,6/12,1,20/12)
#y <- c(0.0050,0.0065,0.0085,0.0105,0.0120)
coeffs<- cubic_spline(x,y)
n<-4
a <- c(0*1:n)
b <- c(0*1:n)
c <- c(0*1:n)
d <- c(0*1:4*n)
for (i in 1:n) {
a[i] <- coeffs[4*i-3]
b[i] <- coeffs[4*i-2]
c[i] <- coeffs[4*i-1]
d[i] <- coeffs[4*i]
}
a
b
c
d
x
y
source("../hw1/nla_funcs.R")
x <- c(0, 2/12,5/12,11/12,15/12)
y <- c(0.01,-log(.9980)/(2/12), -log(.9935)/(5/12), -log(.9820)/(11/12), -log(.9775)/(15/12))
#Demo problem from book
#x <- c(0,2/12,6/12,1,20/12)
#y <- c(0.0050,0.0065,0.0085,0.0105,0.0120)
coeffs<- cubic_spline(x,y)
n<-4
a <- c(0*1:n)
b <- c(0*1:n)
c <- c(0*1:n)
d <- c(0*1:4*n)
for (i in 1:n) {
a[i] <- coeffs[4*i-3]
b[i] <- coeffs[4*i-2]
c[i] <- coeffs[4*i-1]
d[i] <- coeffs[4*i]
}
a
b
print(a,6)
print(b,6)
print(c,6)
print(d,6)
z
z<- splinefun(x,y,method="natural")
c <- 0.625
c
c*exp(-z(1/12)*(1/12)) + c*exp(-z(4/12)*(4/12)) + c*exp(-z(7/12)*(7/12)) + c*exp(-z(10/12)*(10/12)) + c*exp(-z(13/12)*(13/12))
c*exp(-z(1/12)*(1/12)) + c*exp(-z(4/12)*(4/12)) + c*exp(-z(7/12)*(7/12)) + c*exp(-z(10/12)*(10/12)) + 100.625*exp(-z(13/12)*(13/12))
print(c*exp(-z(1/12)*(1/12)) + c*exp(-z(4/12)*(4/12)) + c*exp(-z(7/12)*(7/12)) + c*exp(-z(10/12)*(10/12)) + 100.625*exp(-z(13/12)*(13/12)),digits=6)
print(c*exp(-z(1/12)*(1/12)) + c*exp(-z(4/12)*(4/12)) + c*exp(-z(7/12)*(7/12)) + c*exp(-z(10/12)*(10/12)) + 100.625*exp(-z(13/12)*(13/12)),digits=9)
print(c*exp(-z(1/12)*(1/12)) + c*exp(-z(4/12)*(4/12)) + c*exp(-z(7/12)*(7/12)) + c*exp(-z(10/12)*(10/12)) + 100.625*exp(-z(13/12)*(13/12)),digits=10)
plot(z)
plot(z,xlab = "Months/12",ylab="Zero Rate")
plot(x)
plot([z,x],xlab = "Months/12",ylab="Zero Rate",)
plot(z,x,xlab = "Months/12",ylab="Zero Rate",)
points(x = x,y = y)
points(x = x,y = y)
plot(z,x,xlab = "Months/12",ylab="Zero Rate",)
plot(z)
points(x = x,y = y,xlab = "Months/12",ylab="Zero Rate")
plot(z)
plot(z)
par()
points(x = x,y = y,xlab = "Months/12",ylab="Zero Rate")
plot(z)
par(new=FALSE)
points(x = x,y = y,xlab = "Months/12",ylab="Zero Rate")
plot(z)
par(new=TRUE)
points(x = x,y = y,xlab = "Months/12",ylab="Zero Rate")
opar<-par(new=TRUE)
plot(z)
par(opar)
points(x = x,y = y,xlab = "Months/12",ylab="Zero Rate")
plot(z)
points(x = x,y = y,xlab = "Months/12",ylab="Zero Rate")
plot(z,xlab = "Months/12",ylab="Zero Rate")
points(x = x,y = y)
plot(z,xlab = "Months/12",ylab="Zero Rate(%)")
points(x = x,y = y)
x
y
plot(z,xlab = "Months/12",ylab="Zero Rate(%)",xlim = 1.5)
plot(z,xlab = "Months/12",ylab="Zero Rate(%)")
plot(z,xlab = "Months/12",ylab="Zero Rate(%)")
points(x = x,y = y)
points(x = x,y = y)
plot(z,xlab = "Months/12",ylab="Zero Rate(%)")
points(x = x,y = y)
x
z<- splinefun(x,y,method="natural")
plot(z,xlab = "Months/12",ylab="Zero Rate(%)")
plot(z,xlab = "Months/12",ylab="Zero Rate(%)")
points(x = x,y = y)
plot(z,xlab = "Months/12",ylab="Zero Rate(%)",title="Zero rate vs Date")
points(x = x,y = y)
plot(z,xlab = "Months/12",ylab="Zero Rate(%)",main="Zero rate vs Date")
plot(z,xlab = "Months/12",ylab="Zero Rate(%)",main="Zero rate vs Date")
points(x = x,y = y)
source('~/math_examples/nla/hw1/nla_funcs.R')
source('~/math_examples/nla/hw1/nla_funcs.R')
M_bar<- cubic_spline(x,y)
M_bar
print_latex(M_bar)
library("xtable")
print_latex(M_bar)
print_latex(M_bar,digits=6)
print_latex(M_bar,digits=6,rownames_on=FALSE,colnames_on=FALSE)
print_latex(M_bar,digits=6,rownames_on=FALSE,colnames_on=FALSE)
source('~/math_examples/nla/hw1/nla_funcs.R')
print_latex(M_bar,digits=6,rownames_on=FALSE,colnames_on=FALSE)
source('~/math_examples/nla/hw1/nla_funcs.R')
print_latex(M_bar,digits=6,rownames_on=FALSE,colnames_on=FALSE)
b <- c(0,0,0,1,0.16)
P <- matrix(0,nrow=5,ncol=5)
P[1,4] <-1;P[2,2] <- 1;P[3,3] <-1;P[4,1] <-1;P[5,5] <-1
L <- matrix(c(1,0,0,0,0,-0.0225,1,0,0,0,0.0315,0.051852,1,0,0,0.045,-1/3,0.038067,1,0,0.1,0.246914,0.400056,-0.482738,1),nrow=5,ncol=5)
L <- t(L)
y<-forwardsolve(L,P%*%b)
U <- matrix(c(1,1,1,0,0,0,0.2025,0.0645,1,0.15,0,0,0.210555,0.948148,0.192222,0,0,0,1.297240,0.142683,0,0,0,0,-0.045059),nrow=5,ncol=5)
U <- t(U)
x <- backsolve(U,y)
x
u <-1.05;d<-0.95;r<-0.04
p_rn_1 <-(exp(r*1/12)-d)/(u-d)
p_rn_2<- (u-exp(r*1/12))/(u-d)
v_t0_put = exp(-r*3/12)*(0+0+2*p_rn_1*p_rn_2^2*3.1425+p_rn_2^3*8.5575+p_rn_1*p_rn_2^2*3.1425)
v_t0_put
print(v_t0_put,digits=9)
u <-1.05;d<-0.95;r<-0.04
p_rn_1 <-(exp(r*1/12)-d)/(u-d)
p_rn_2<- (u-exp(r*1/12))/(u-d)
v_t0_put = exp(-r*3/12)*(0+0+2*p_rn_1*p_rn_2^2*3.1425+p_rn_2^3*8.5575+p_rn_1*p_rn_2^2*3.1425)
print(v_t0_put,digits=9)
print(v_t0_put,digits=10)
source('~/math_examples/nla/hw7/port_alloc_funcs.R')
m <- c(0.026, 0.034, 0.045, 0.052)
m
covar_matrix <- matrix(c(0.04, -0.015, 0.015, -0.005, -0.015, 0.0625, -0.02, -0.01, 0.015, -0.02, 0.1024, 0.02, -0.005,-0.01,0.02, 0.1225), byrow=TRUE, nrow=4)
covar_matrix
r_f <- 0.0075
min_var_tangent_asset_alloc(covar_matrix, m, r_f,1)
t(min_var_tangent_asset_alloc(covar_matrix, m, r_f,1)$w_T)%*%m
tangency_portfolio <- function(covar_matrix, mu, r_f) {
# The dummy mu doesnt matter here
w_T <- min_var_tangent_asset_alloc(covar_matrix, mu, r_f, 1)$w_T
mu_tangency <- t(w_T) %*% mu
sigma_port <- min_var_tangent_asset_alloc(covar_matrix, mu, r_f, mu_tangency)$sigma_min
ret <- list("w_T" = w_T, "mu" = mu_tangency, "sigma" = sigma_port)
return (ret)
}
tangency_portfolio(covar_matrix, m, r_f)
tangency_portfolio <- function(covar_matrix, mu, r_f) {
# The dummy mu doesnt matter here
w_T <- min_var_tangent_asset_alloc(covar_matrix, mu, r_f, 1)$w_T
mu_tangency <- t(w_T) %*% mu
sigma_port <- min_var_tangent_asset_alloc(covar_matrix, mu, r_f, mu_tangency)$sigma_min
sharpe <- sharpe_ratio(mu_tangency, r_f, sigma_port)
ret <- list("w_T" = w_T, "mu" = mu_tangency, "sigma" = sigma_port, "sharpe_ratio" = sharpe)
return (ret)
}
tangency_portfolio(covar_matrix, m, r_f)
mu
m
A = matrix(c(2, -1, 1,-2,1,3,4,0,1), nrow = 3)
A
A = matrix(c(2, -1, 1,-2,1,3,4,0,1), ncol = 3)
A
t(A)
A = t(A)
lu(A)
expand(lu(A))
rm(list = ls())
source("../hw1/nla_funcs.R")
#financials2012 <- read.csv("~/math_examples/nla/hw7/financials2012.csv")
financials2012 <- read.csv("data-7-cov_corr_july2011-june2013_weekly.csv")
#REQUIRES DATA WITH FURTHEST DATE AT THE TOP AND CLOSEST AT BOTTOM T1<T2
# IF T1 > T2, next line is needed
#financials2012 <- financials2012[nrow(financials2012):1, ]
# Part i
percent_returns <- calculate_percent_returns(financials2012)
write.csv(percen_returns, "percent_returns.csv")
rm(list = ls())
source("../hw1/nla_funcs.R")
#financials2012 <- read.csv("~/math_examples/nla/hw7/financials2012.csv")
financials2012 <- read.csv("data-7-cov_corr_july2011-june2013_weekly.csv")
#REQUIRES DATA WITH FURTHEST DATE AT THE TOP AND CLOSEST AT BOTTOM T1<T2
# IF T1 > T2, next line is needed
#financials2012 <- financials2012[nrow(financials2012):1, ]
# Part i
percent_returns <- calculate_percent_returns(financials2012)
write.csv(percent_returns, "percent_returns.csv")
rm(list = ls())
source("../hw1/nla_funcs.R")
#financials2012 <- read.csv("~/math_examples/nla/hw7/financials2012.csv")
financials2012 <- read.csv("data-7-cov_corr_july2011-june2013_weekly.csv")
#REQUIRES DATA WITH FURTHEST DATE AT THE TOP AND CLOSEST AT BOTTOM T1<T2
# IF T1 > T2, next line is needed
setwd("~/git_repos/math_examples/nla/fall2016_final")
rm(list = ls())
source("../hw1/nla_funcs.R")
#financials2012 <- read.csv("~/math_examples/nla/hw7/financials2012.csv")
financials2012 <- read.csv("data-7-cov_corr_july2011-june2013_weekly.csv")
#REQUIRES DATA WITH FURTHEST DATE AT THE TOP AND CLOSEST AT BOTTOM T1<T2
# IF T1 > T2, next line is needed
percent_returns <- calculate_percent_returns(financials2012)
write.csv(percent_returns, "percent_returns.csv")
percent_returns <- calculate_percent_returns(financials2012)
write.csv(percent_returns, "percent_returns.csv", digits=9)
write.csv(covar_matrix_returns, "percent_returns.csv")
covar_matrix_returns <- covar_calc(percent_returns)
write.csv(covar_matrix_returns, "percent_returns.csv")
